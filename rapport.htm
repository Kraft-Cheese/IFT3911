<html>
<head>
    <title>IFT3911 DM2</title>
    <style type="text/css">
        table
        {
            border: outset 2px black;
            border-collapse: collapse;
        }
        th
        {
            border-bottom: double 2px black;
        }
        td
        {
            border-bottom: solid 1px black;
        }
        .first_col
        {
            border-right: double 2px black;
        }
    </style>
</head>
<body>
    <h1 style="text-align: center;">
        IFT 3911 - Devoir 2 - Mike</h1>
    <h2>
        Information générale</h2>
    <p>
        <span style="font-weight: bold;">Nom: </span>Amélie Coughlan
        <br />
        <span style="font-weight: bold;">Matricule: </span> 9813
        <br />
        <span style="font-weight: bold;">Courriel: </span>amelie.therese.coughlan@umontreal.ca
        <br />
        <span style="font-weight: bold;">temps mis: </span> 20h
    </p>
    <p>
        <span style="font-weight: bold;">Nom: </span>Cassandre Hamel
        <br />
        <span style="font-weight: bold;">Matricule: </span> 0863
        <br />
        <span style="font-weight: bold;">Courriel: </span>cassandre.hamel.1@umontreal.ca
        <br />
        <span style="font-weight: bold;">temps mis: </span> 20h
    </p>
    <p>
        <span style="font-weight: bold;">Nom: </span>Alessandra Mancas
        <br />
        <span style="font-weight: bold;">Matricule: </span>9098
        <br />
        <span style="font-weight: bold;">Courriel: </span>alessandra.thais.mancas@umontreal.ca
        <br />
        <span style="font-weight: bold;">temps mis: </span> 20h
    </p>
    <h2>
        Distribution des tâches</h2>
    <p>
        <span style="font-weight: bold;">Soumetteur: </span>Alessandra Mancas
    </p>
    <table cellpadding="7px">
        <thead>
            <tr>
                <th>
                    Amélie
                </th>
                <th>
                    Cassandre
                </th>
                <th>
                    Alessandra
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    Statechart, OCL, qualité du design, rapport
                </td>
                <td>
                    Réseau de Pétri, diagramme de paquets, diagramme de classes, qualité du design, rapport
                </td>
                <td>
                    Diagramme de classes, diagrammes de séquence, OCL, qualité du design, rapport
                </td>
            </tr>

        </tbody>
    </table>

    <h2>Tâche 1 - Réseau de Pétri: Tunnel</h2>

    <h3>Modélisation du réseau de Pétri</h3>
    <p>
        <img src="./Reseau_de_petri/PetriNetTunnel.png" alt="Réseau de Pétri" style="max-width: 100%; height: auto; display: block; margin-top: 10px;">
    </p>

    <h3>Analyse du réseau de Pétri</h3>
    <h4>Places: </h4>
    <p>
        <ul>
            <li>P_m, P_rs: représente la présence d'une voiture en attente soit à l'entrée du tunnel (Montreal) ou à l'entrée du tunnel (Rive-Sud).</li>
            <li>G_m, G_rs: représente si le feu est vert à l'entrée du tunnel (Montreal) ou à l'entrée du tunnel (Rive-Sud).</li>
            <li>D_m, D_rs: représente vers où la voiture va, soit Montreal ou Rive-Sud.</li>
            <li>T_m->rs, T_rs->m: représente le tunnel, soit de Montreal à Rive-Sud ou de Rive-Sud à Montreal.</li>
        </ul>
        <p>
            P_m et P_rs ont toujours une voiture en attente ainsi elles ont toujours un jeton.
        </p>
    <h4>Transitions: </h4>
    <p>
       <ul>
        <li>t_m_en, t_rs_en: représente l'entrée d'une voiture à l'entrée du tunnel (Montreal) ou à l'entrée du tunnel (Rive-Sud).</li>
        <li>t_ex_m, t_ex_rs: représente la sortie d'une voiture à l'entrée du tunnel (Montreal) ou à l'entrée du tunnel (Rive-Sud).</li>
       </ul>
    </p>
    <h4>Les arcs: </h4>
    <!--Should be tables : Transition | Places in | Places out -->

    <table cellpadding="7px">
        <thead>
            <tr>
                <th>
                    Transition
                </th>
                <th>
                    Places entrantes
                </th>
                <th>
                    Places sortantes
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    t_m_en
                </td>
                <td>
                    P_m, G_m, D_rs
                </td>
                <td>
                    P_m, T_m->rs
                </td>
            </tr>
            <tr>
                <td>
                    t_rs_en
                </td>
                <td>
                    P_rs, G_rs, D_m
                </td>
                <td>
                    P_rs, T_rs->m
                </td>
            </tr>
            <tr>
                <td>
                    t_ex_m
                </td>
                <td>
                    T_rs->m
                </td>
                <td>
                    D_rs, G_m
                </td>
            </tr>
            <tr>
                <td>
                    t_ex_rs
                </td>
                <td>
                    T_m->rs
                </td>
                <td>
                    D_m, G_rs
                </td>
            </tr>
        </tbody>

    </table>

    <h4>Marquage initial: </h4>
    <p>
        <ul>
            <li>P_m = 1, P_rs = 1, G_m = 1, G_rs = 0, D_m = 0, D_rs = 1, T_m->rs = 0, T_rs->m = 0</li>
        </ul>
    </p>

    <h4>Loi de conservation: </h4>
    <p>
        Loi 1 - Seulement une voiture dans le tunnel : M(T_m->rs) + M(T_rs->m) + M(G_m) + M(G_rs)  = 1 <br>
            ce qui implique que les voitures ne peuvent pas se croiser : M(T_m->rs) + M(T_rs->m) = 1
            et que les voitures ne peuvent pas entrer dans le tunnel si le feu est rouge : M(G_m) = 0 et M(G_rs) = 0
        Loi 2 - Les voitures alternent entre les deux directions : M(D_m) + M(D_rs) = 1 <br>
            ceci force les voitures à sortir du tunnel dans la direction opposée à celle d'entrée
            et cause une alternance stricte entre les voitures entrant à Montreal et à Rive-Sud
        Loi 3 - Il y a toujours une voiture à chaque entrée : M(P_m) + M(P_rs) = 2 <br>
    </p>

    <h4>Graphe d'accessibilité: </h4>
    <p>
        <ul>
            Pour le noeud : (P_m, G_m, D_rs, T_m->rs, T_rs->m, P_rs, G_rs, D_m) <br>
            <li>1. (1,1,1,0,0,1,0,0) -> t_m_en -> (1,0,0,1,0,1,0,0)</li>
            <li>2. (1,0,0,1,0,1,0,0) -> t_ex_rs -> (1,0,0,0,0,1,1,1)</li>
            <li>3. (1,0,0,0,0,1,1,1) -> t_rs_en -> (1,0,0,0,1,1,0,0)</li>
            <li>4. (1,0,0,0,1,1,0,0) -> t_ex_m -> (1,1,1,0,0,1,0,0)</li>
            <li>5. Le marquage initial est atteint</li>
        </ul>
    </p>

    <h4>Propriétés: </h4>
    <p>Est-ce que le réseau est borné? Oui, car seulement une voiture peut être dans le tunnel à la fois, et il y a toujours une voiture à chaque entrée. </p>
    <p>Y-a-t-il une loi de conservation? Oui, les voitures ne peuvent pas se croiser et les voitures alternent entre les deux directions.</p>
    <p>Y-a-t-il une situation d'interblocage? Non, il y a un cycle qui accede à chaque transition, aucun neoud du graphe reste terminal.</p>
    <p>Y-a-t-il une situation de famine? Non, puisqu'il y a une alternance stricte entre les voitures entrant à Montreal et à Rive-Sud.</p>
    <p>Y-a-t-il des transitions mortes? Non, puisque chaque transition reste activable indefiniment du a l'alternance stricte qui visite chaque transition. (L4) </p>

    </p>



    <h2>Tâche 2 - Statechart: Four à micro-onde</h2>

    <h3>Modélisation du Statechart</h3>

    <p>
        <b>Chemin vers le répertoire du State Chart = ./Statechart/model/microwave.sct</b>
        <p>
            <img src="./StateChart.png" alt="Statechart" style="max-width: 100%; height: auto; display: block; margin-top: 10px;">
        </p>
    </p>
    <h3>Précisions</h3>
        <p>
            <ul>
                <li>
                    <i>La porte peut être ouverte ou fermée en tout temps. Pour des raisons de sécurité, la cuisson ne peut avoir lieu si la porte est ouverte. Durant la cuisson, l'ouverture de la porte interrompt la cuisson. Le message 'Waiting' est alors affiché. Lorsque la porte est refermée, l'afficheur affiche le texte précédent l'ouverture (message ou temps).</i>
                    <br><br>
                    Il y a ici une ambiguïté dans les instructions quant à si on doit afficher le 'Waiting' seulement quand on ouvre la porte pendant la cuisson, ou si on doit l'afficher n'importe quand qu'on l'ouvre. Après plusieurs interactions avec plusieurs micro-ondes différents, nous avons conclu qu'il est possible de faire d'autres inputs dans le clavier du micro-ondes pendant qu'il est ouvert, sauf pour partir la cuisson. Dans ce cas, il ne ferait pas de sens d'afficher 'Waiting', étant donné qu'on doit continuer à afficher le résultat des inputs. Nous avons décidé d'implémenter ce comportement. Donc, ce message est seulement affiché quand on ouvre la porte pendant la cuisson. Aucun input ne peut être entré pendant ce temps, on peut seulement fermer la porte, ou appuyer sur stop pour recommencer le processus.
                </li>
                <br>
                <li>
                    <i>Appuyer sur stop arrête tout le processus et met le système au repos.</i>
                    <br><br>
                    Nous avons interprété le fait de mettre le système au repos de le recommencer. Donc, quand on appuie sur stop à n'importe quel moment, que ce soit pendant la cuisson ou pendant de l'input dans le clavier, on interromp tout et on peut recommencer.
                </li>
                <br>
                <li>
                    Pour une raison quelconque, les triggers 'always' et 'oncycle' ne marchaient pas tout à fait de la manière attendue. La documentation de Yakindu indique clairement que les transitions avec un de ces triggers se déclenchera immédiatement lorsque les fonctions entry/ et exit/ ont terminé dans l'état de départ. Toutefois, il fallait toujours peser sur n'importe quel bouton sur le clavier pour permettre la transition. C'est pourquoi il y a 2 transitions qui ont comme trigger <b>after 2ms</b>, c'était la meilleure façon de simuler des transitions immédiates (utiliser 0s générait d'autres bogues).
                </li>
            </ul>
        </p>

    <h2>Tâche 3 - Design logiciel</h2>
    <h3>Révision du diagramme de classe</h3>
    <p>./Design/ClassDiagram.png</p>
    <p>
        <img src="./Design/ClassDiagram.png" alt="Diagramme de classe" style="max-width: 100%; height: auto; display: block; margin-top: 10px;">
    </p>

    <div>
        <p>
            Ajouts des attributs et des cardinalités qui manquaient dans la première version. 
        </p>
        <p>
            Ajout des fonctionnalités Admin qui manquaient également dans la première version du diagramme. 
        </p>
        <ul>
            <li>Nous avons suivi une logique MVC pour séparer le comportement de l’application pour un client puis pour un administrateur. En violet: Model, en orange: controller, en turquoise: view.</li>
            <li>Selon nous, les deux utilisateurs navigueront à travers des menus en ligne de commande (pour le moment) afin de faire leurs sélections et choisir leur prochaine action. </li> <br>
            <li><span><i>Pour l’utilisateur</i></span>, le menu principal (dans CustView) lui permettra de choisir s’il veut chercher un Parcours ou payer pour une réservation. S’il veut chercher un parcours, 
                s’affichera un formulaire dans lequel il entrera ses critères de recherche, puis une liste sera affichée après avoir passé par CustController et SysModel pour chercher les 
                bonnes données. À partir de cette liste, il pourra par la suite sélectionner le parcours qui l’intéresse et en voir plus d’informations, puis à partir de cette page il peut choisir
                 de faire une réservation. Ceci le mènera au formulaire de réservation dans lequel il pourra entrer ses données et ce qui instantiera une nouvelle Réservation (voir le diagramme de séquence). </li> <br>
            <li><span><i>Pour l'administrateur</i></span>, à partir du menu principal il pourra choisir s’il veut consulter une liste de parcours, de modes de transport, de compagnies ou de hubs. Après il pourra choisir la 
                sous-classe qu’il désire puis une liste s’affichera (affEntityList). Il pourra ensuite modifier ou supprimer un élément à un index donné. Pour modifier, l’information de l’Entity sera affichée 
                (affEntityInfo) et il aura le choix de quel(s) attribut(s) changer. Pour supprimer, l’élément sera simplement supprimé du ArrayList correspondant à l’entité dans SysModel. Pour ajouter/créer une entité, 
                l’administrateur sélectionnera cette option et ceci le mènera à un formulaire d’instantiation propre à l’entité (affNewEntityForm)</li>
        </ul>
        <p>Ajout de la classe Entity</p>
        <ul>
            <li>On voulait généraliser davantage les différents objets qui existent dans ce projet. En créant cette classe, on ouvre la possibilité d’étendre l’application en y ajoutant des sous-types.</li>
            <li>Ceci nous permet également d’utiliser Entity comme un type “Générique” dans les actions de Admin, ce qui lui permettra d’avoir des méthodes plus réutilisables. </li>
        </ul>
    </div>

    <h3>Identification des modules réutilisables</h3>
    <p>Les domaines des classes seront abordés dans la tâche 4, mais on peut déjà observer des classes plus réutilisables que d’autres. <br>

        <span><b>CustView</b></span> et <span><b>AdminView</b></span> pourraient afficher des choses pour d’autres applications (comme du e-commerce), pas seulement une application de réservation de voyages. 
        
        <span><b>User</b></span> est notre classe la plus générale et peut être étendue pour nous donner plusieurs types d’utilisateurs. <br>
        
        <span><b>Entity</b></span> a également un attribut et des méthodes qui seront reprises dans toutes ses spécialisations. Dans un autre contexte, comme un magasin, Entity pourrait représenter toute la marchandise. <br>
        
        <span><b>Paiement</b></span> représente simplement un système de paiement avec une classe qui pourrait, encore une fois, être reprise dans d’autres contextes. <br></p>

    <h3>Révision des diagrammes de séquence</h3>
        <p>Nous avons adapté les diagrammes de séquence à notre nouveau diagramme de classes</p>
        <h4>Vérifier des vols ou des itineraire</h4>
        <p>./Design/verif_vols_itineraires.png</p>
        <p>
            <img src="./Design/verif_vols_itineraire.png" alt="Séquence: vérifier vols et itinéraires" style="max-width: 100%; height: auto; display: block; margin-top: 10px;">
        </p>

        <h4>Réserver un siège</h4>
        <p>./Design/reserver_un_siege.png</p>
        <p>
            <img src="./Design/reserver_un_siege.png" alt="Séquence: réserver un siège" style="max-width: 100%; height: auto; display: block; margin-top: 10px;">
        </p>

        <h4>Payer pour un siège</h4>
        <p>./Design/payer_pour_un_siege.png</p>
        <p>
            <img src="./Design/payer_pour_un_siege.png" alt="Séquence: payer pour un siège" style="max-width: 100%; height: auto; display: block; margin-top: 10px;">
        </p>
        
        
    <h3>Révision du diagramme de paquets</h3>
    <p>./Design/paquets.png</p>
    <p>
        <img src="./Design/paquets.png" alt="Diagramme de paquets" style="max-width: 100%; height: auto; display: block; margin-top: 10px;">
    </p>

    <h3>Révision des contraintes OCL</h3>
    <div>
        <p>
            Nous avons vérifié toutes les contraintes OCL qui n'avaient pas d'erreur après la correction du devoir 1, et elles étaient toujours valides pour le nouveau diagramme de classes. Donc, ci-dessous, nous corrigeons uniquement celles qui étaient erronées.
        </p>
        <p>
            <ol>
                <li>
                    <i>Un vol est identifié par un ID qui commence par deux lettres suivi d'une série de chiffres. La partie alphabétique de l'ID d'un vol est unique à chaque compagnie et la partie numérique est unique à chaque vol au sein de la même compagnie.</i>
                    <br><br>
                    context Cie_aerienne <br>
                    &nbsp;&nbsp;&nbsp;&nbsp; inv : self.shortId.size() = 2 <br>
                    &nbsp;&nbsp;&nbsp;&nbsp; inv : self.allInstances() &rarr; isUnique(shortId) <br>
                    &nbsp;&nbsp;&nbsp;&nbsp; inv : self.volsOfferts &rarr; forAll(v1, v2 | v1 <> v2 implies v1.ID.substring(2, v1.ID.size()) <> v2.ID.substring(2, v2.ID.size())) <br>
                    &nbsp;&nbsp;&nbsp;&nbsp; inv : self.volsOfferts &rarr; forAll(v | v.ID.substring(0,2) = self.shortId) <br>
                </li>
                <br>
                <li>
                    <i>Un paquebot peut être assigné à plusieurs itinéraires tant qu'ils ne se chevauchent pas.</i>
                    <br><br>
                    context Paquebot <br>
                    &nbsp;&nbsp;&nbsp;&nbsp; inv : self.total_parcours &rarr; forAll(p1, p2 | p1 <> p2 implies p1 &rarr; intersection(p2) &rarr; isEmpty()) <br>
                    &nbsp;&nbsp;&nbsp;&nbsp; inv : self.total_parcours &rarr; forAll(p1, p2 | p1 <> p2 implies (p1.Date_depart < p1.Date_arrivee && p1.Date_arrivee < p2.Date_depart && p2.Date_depart < p2.Date_arrivee) || (p2.Date_depart < p2.Date_arrivee && p2.Date_arrivee < p1.Date_depart && p1.Date_depart < p1.Date_arrivee)) <br>
                </li>
                <br>
                <li>
                    <i>Le client peut réserver un siège disponible dans un vol (trajet) donné. / Le client peut réserver une cabine disponible pour un itinéraire donné.</i>
                    <br><br>
                    context Systeme::creerReservation(Parcours pa, Section s, Preference pr) <br>
                    &nbsp;&nbsp;&nbsp;&nbsp; pre : s.DispoSect <br>
                    <br>
                    L'erreur qu'on nous a donné ici était que nous avions vérifié la disponiblité de la section et non du siège. Par contre, nous avons fait exprès. Étant donné que les instructions expliquaient que le client <i>a l'option de choisir une priorité entre l'aile ou la fenêtre</i>, nous avons interprété ceci comme de quoi le client ne choisit pas vraiment son siège spécifiquement. Il choisit simplement une section où il aimerait être, une préférence entre l'aile ou la fenêtre, et le système lui assigne un siège spécifique qui remplit (le plus possible) ces critères.
                </li>
                <br>
                <li>
                    <i>Un siège réservé devient assigné à un passager une fois payé: le siège est donc confirmé.</i>
                    <br><br>
                    context Reservation::setValid() <br>
                    &nbsp;&nbsp;&nbsp;&nbsp; post : custController.chargerCarte() = true implies not self.place.DispoPlace <br>
                </li>
                <br>
            </ol>
        </p>
    </div>


    <h2>Tâche 4 - Qualité du design</h2>
        <p></p>
    <h3>Discussion du couplage</h3>
        <div>
            <h4>Fardeaux</h4>
            <p>Le fardeau a un lien étroit avec le domaine des classes. En raisonnant puis en calculant le fardeau, on constate que nos classes 
                appartiennent à 2 domaines principaux: </p>
            <ul>
                <li>Domaine du métier: </li>
                <li>Domaine de l'application: </li>
            </ul>
            <p>En calculant seulement une partie du fardeau, on peut constater que les classes propres 
                à notre application (et donc, non-réutilisables) ont un fardeau bien plus élevé que celles qu’on a nommées réutilisables à la tâche 3.</p>
            <p>On n’a pas besoin de calculer le fardeau entier pour distinguer les deux domaines de classes. En effet, les classes correspondant au domaine 
                du métier auront moins de dépendances, car elles utilisent des structures de données n’ayant que quelques classes différentes. Par exemple,
                 Paquebot aura, dans ses attributs, une liste de Port et une instance de Cie_croisiere. Tandis que, pour des classes ayant un comportement central 
                 à notre application, comme SysModel, le fardeau sera bien plus élevé, car il contient des listes avec plusieurs types d’Entity distincts. En effet, 
                 comme on discutera dans le couplage, ceci peut être un exemple de mauvais couplage puisqu’on donne énormément de dépendances à la classe Model. </p>
            <p>En lisant les association unidirectionnelles, nous avons “isolé” les classes de domaine plus bas, notamment Entity. </p>
        </div>

        <div>
            <h4>Types de couplage (évaluation qualitative)</h4>
            <p><i>Couplage d'héritage</i></p>
            <ul>
                <li>Pour toutes nos entités, afin de pouvoir les utiliser dans une même structure de données (dans SysModel) et assurer un comportement uniforme (ordonnable, etc) </li>
            </ul>
            <p><i>Couplage par contenu</i></p>
            <ul>
                <li>Les attributs sont privés et on passera toujours par des getters et setters pour modifier tout attribut (d’un trajet par exemple) ou liste (par un setter qui ajoute par la suite)</li>
                <li>Ainsi, on n’accède jamais directement aux attributs d’une classe. </li>
            </ul>
            <p><i>Couplage commun</i></p>
            <ul>
                <li>✅ La seule variable globale est la “base de données” dans la classe “sysModel”. Elle est modifiable que deux fois. </li>
                <li>✅ La liste de réservations actives est accessible seulement quand un utilisateur crée une réservation, la paie ou le temps s’est écoulé (la désactiver)</li>
                <li>✅ Les listes d’entités que par l’adminController, s’il veut modifier une entité, la supprimer ou en ajouter une</li>
                <li>✅ En pratique, ces listes ne seront pas statiques, puis il faudra que les controlleurs passent par une instance de SysModel pour les modifier. </li>
                <li>❌ Une possible faiblesse de notre implémentation est le fait que deux classes accèdent au SysModel au lieu d'une seule, ce qui augmente le couplage de la classe. 
                    On pourrait créer une interface ou une classe abstraite comme "controlleur parent". 
                </li>
            </ul>
            <p><i>Couplage par contrôle</i></p>
            <ul>
                <li>✅ Le flux de contrôle est séparé en plusieurs méthodes au sein d’une même classe (le controller). On s’assure ainsi que toutes les actions possibles que le client peut prendre se trouvent 
                    dans une seule classe, facilitant ainsi la maintenance et l’ajout d’actions. Ainsi, tout flux qui dépend d’un paramètre sera traité à la même place. </li>
            </ul>
            <p><i>Couplage par paquet & de données</i></p>
            <ul>
                <li>✅ Lorsqu’on passe une structure de données ou une classe en paramètre, on ne passe que l’essentiel quand on peut. </li>
                <li>✅ La méthodecheckreservation utilise que le numéro de réservation au lieu de son instance, pour la vérifier dans la liste de réservations actives. </li>
                <li>❌ Cependant, dans resultatsSearch, on passe une instance complète de ModeTransport en paramètre. ceci serait à corriger dans notre prochaine itération du 
                    diagramme, car il y a peu d’utilité à passer une instance au complet si c’est juste pour filtrer des résultats. </li>
            </ul>

        </div>
    <h3>Discussion de la cohésion</h3>
        <p>La plupart de notre logique d’application se trouve dans le “coeur” MVC du projet. </p>
        <p>✅ On évite ainsi la <b>cohésion accidentelle</b> en donnant peu de responsabilités à chaque classe.
            <ul>
                <li>❌ Cependant, on trouve que les classes “Controller” et “View” font beaucoup de choses qu’on pourrait séparer davantage pour rendre le code encore plus maintenable. (ca porurait par contre 
                    augmenter le couplage et les dépendances entre les classes)</li>
            </ul>
        </p>

        <p>
            ✅ La <b>cohésion logique</b> est évitée en utilisant des classes abstraites pour tous les modes de transport par exemple, qui auront chacune un comportement différent au moment de la réservation. 
        </p>
        <ul>
            <li>La méthode showInfo() dans la classe abstraite “Parcours” affichera des données différentes selon le type. Elle sera implémentée dans “vol”, “itinéraire” et “trajet” au lieu d’être dans une grosse classe qui fait les 3. Ceci rend plus facile les changements à ces parcours-là, car il ne faudra pas toucher à la classe parent. </li>
        </ul>

        <p>❌ <b>Cohésion temporelle</b> et procédurale sont présentes dans les Controller et SysModel, ce qui n’est pas idéal. </p>
        <ul>
            <li>Tel que mentionné dans la cohésion accidentelle, on pourrait utiliser des “Managers” ou des classes séparées qui géreraient les formulaires d’utilisateur, le processus de recherche, etc… Ceci augmentera la réutilisabilité du module. C’est à retravailler avant d’implémenter le projet. </li>
        </ul>

        <p>✅ <b>Cohésion fonctionnelle</b>: les “views” s’occupent que d’afficher de l’information et naviguer à travers les pages de menu de l’interface. la méthode “showInfo” se trouve que pour les parcours et sera implémentée par ses enfants.</p>
        <ul>
            On s’assure ainsi que la classe d’un parcours nous permet simplement de lire (getters) ses attributs, les imprimer au besoin (showInfo) et les modifier (setters). On n’opère que sur l’objet actuel. 
        </ul>

    <h3>Graphe IA et justification</h3>
    <img src="./Design/GrapheIA.jpg" alt="Graphe IA" style="max-width: 100%; height: auto; display: block; margin-top: 10px;">
    <p>
        Le graphe IA montre que nos trois paquets respectent globalement les bonnes pratiques de conception. Le paquet <strong>Interface</strong> est totalement instable (I = 1) et totalement concret (A = 0), ce qui est acceptable, car aucun autre paquet n’en dépend. Il se trouve ainsi sur la diagonale principale du graphe, ce qui respecte le <strong>Stable Abstractions Principle (SAP)</strong>. <br><br>
        Le paquet <strong>Transports</strong> est également bien positionné : il est instable (I = 0.8) et peu abstrait (A = 0.2), ce qui convient à un paquet de modèle d'affaires contenant surtout des entités concrètes. Il se trouve exactement sur la diagonale principale du graphe IA, ce qui montre un bon équilibre entre abstraction et instabilité. <br><br>
        Le seul paquet légèrement problématique est <strong>Core</strong>, qui est relativement stable (I ≈ 0.64) mais pas assez abstrait (A = 0.2). Cela signifie que ce paquet, bien que central, pourrait gagner en flexibilité et en maintenabilité en introduisant davantage d’interfaces ou de classes abstraites pour respecter pleinement le <strong>SAP</strong>. Malgré tout, son écart à la diagonale est modéré comme montré par le graphe IA.
    </p>
    <!-- <h3>Justification de l'application des principes de conception</h3>
        <p>
            Nous avons structuré notre système selon une architecture inspirée du modèle MVC afin de bien séparer les responsabilités. Cette séparation respecte plusieurs principes de conception orientée objet :
        <ul>
            <li><strong>SRP</strong> : Chaque paquet a une responsabilité claire, la vue pour <em>Interface</em>, le traitement logique pour <em>Core</em>, et les données d'affaires pour <em>Transports</em>.</li>
            <li><strong>SDP</strong> : Les paquets instables (<em>Interface</em> et <em>Transports</em>) dépendent de <em>Core</em>, qui est plus stable. Il y a toutefois un léger écart à ce principe car <em>Transports</em> dépend d’un paquet qui est plus stable (bien) mais peu abstrait (moins bien).</li>
            <li><strong>SAP</strong> : Les paquets <em>Interface</em> et <em>Transports</em> respectent bien ce principe car leur niveau d’abstraction est proportionnel à leur instabilité. Le paquet <em>Core</em> est stable mais manque un peu d’abstraction.</li>
            <li><strong>ACP</strong> : Notre diagramme de paquets est globalement acyclique. Les dépendances sont orientées vers <em>Core</em>, et aucun paquet ne dépend de <em>Interface</em> (un paquet instable), ce qui évite les cycles.</li>
        </ul>
        </p> -->

    <h3>Justification de l'application des principes de conception</h3>
    <h4>LSP ✅ </h4>
    <p>Les compagnies (Cie), modes de transport (ModeTransport), lieux (Hub), et parcours (Parcours) sont tous des <b>sous-types</b> de la classe Entity. Ils partagent l’attribut “id” qui est un entier. Ceci permet au Admin d’effectuer des modifications,  créer et détruire toutes les instances d’un Entity. </p>
    <p>De plus, à chaque niveau de spécialisation (e.g: Entity (0) → ModeTransport (1) → Avion (2)), on ajoute des attributs et des fonctionnalités. Ainsi, <b>les sous-types ne font jamais moins que le type parent</b> et assurent qu’ils seront utilisables partout où un Entity ou ModeTransport/Cie/Hub/Parcours est attendu. </p>
    <p>Les 3 ArrayLists dans SysModel, par exemple, comprendront des instances mixtes d’une classe parent, car on veut avoir une place où trouver ces données sans pour autant sur-spécialisant la classe en créant des listes spécifiques (comme allAvion, par exemple). Nous laissons ainsi de la place à <b>l’extension du projet</b> et à l’ajout de modes de transport ou parcours de types différents comme, par exemple, des bus. </p>
    On n’a également <b>pas de logique conditionnelle basée sur le type</b>. Dans AdminController, les fonctions de modification et de suppression (delete) reçoivent en paramètre un index et la liste de l’élément à modifier. Ceci assure une flexibilité dans le design. 
    
    <h4>OCP ✅ </h4>
    <p>Nous utilisons <b>que des classes concrètes pour l’implémentation assurée des modes de transport, classes, hubs et parcours</b>. Tel qu’énoncé plus tôt, on prend avantage de l’héritage pour laisser place à d’éventuels ajouts. Il suffirait donc d’ajouter une sous-classe à la classe parent puis elle héritera de toutes les fonctionnalités nécessaires. </p>
    <p>Les seules classes concrètes sont celles avec lesquelles l’utilisateur interagira. Par exemple, il n’interagit pas avec la classe abstraite Parcours, mais avec Vol ou Itinéraire pour voir l’information. </p>

    <h4>DIP ✅ </h4>
    <p>Tout d’abord, toutes les classes concrètes proviennent d’un parent abstrait et n’ont <b>aucun héritage avec d’autres classes concrètes</b>. Elles ont seulement un lien direct avec une classe concrète lorsque cette dernière est obligée d’y être reliée. </p>
    Par exemple, un Paquebot aura une liste d’instance de Port, puisqu’il peut passer à travers plusieurs ports. Il ne serait pas logique, étant donné le contexte du projet, d’avoir une liste de simplement ModeTransport, car cela permettrait à un Paquebot d’avoir une liste d’Aéroports, par exemple. 

    <h4>ISP 😗</h4>
    <p>On n’utilise pas d’interfaces dans notre projet, car on se base beaucoup plus sur les classes abstraites pour implémenter une logique d’application et éviter la redondance d’attributs. Cependant, nous comprenons que l’ISP est utile pour éviter que des classes implémentent des méthodes dont elles n’ont pas besoin. On juge simplement que, étant donné le contexte, il y a peu de méthodes qui pourraient être implémentées inutilement par nos sous-types. </p>
    
    <h4>SRP ✅</h4>
    <p>
        Chaque paquet a une responsabilité claire, la vue pour <em>Interface</em>, le traitement logique pour <em>Core</em>, et les données d'affaires pour <em>Transports</em>.
    </p>
    <p>De plus, le modèle MVC et la façon dont nous avons façonné l'héritage de nos classe assure que le rôle de chaque classe est bien défini. 
        Les classes de view ne font que de l'affichage, les classes de contrôleur ne font que de la logique de contrôle et les classes de modèle ne font que de la gestion de données.
        Cependant, on pourrait spécialiser davantage les classes contrôleur et de view. 
    </p>

    <h4>CRP ❌😔</h4>
    <p>Malheureusement on se base beaucoup sur l’héritage pour éviter la redondance des méthodes, qui seront overriden s’il faut les spécialiser. Ceci mène effectivement à de la duplication de code et peut rendre la maintenance du logiciel difficile. </p>
    <p>On pense notamment à la méthode ShowInfo qui pourrait avoir plusieurs implémentations différentes sans pour autant ré-écrire ou modifier son comportement à chaque sous-classe. </p>
    <p>On pourrait, tel que proposé dans les notes de cours, implémenter un patron Strategy dans le devoir 3 pour permettre à des sous-types de changer de comportement sans entrer dans la fonction et changer le code. </p>

    <h4>ACP ✅ </h4>
    <p>Notre diagramme de paquets est globalement acyclique. Les dépendances sont orientées vers <em>Core</em>, et aucun paquet ne dépend de <em>Interface</em> (un paquet instable), ce qui évite les cycles.</p>

    <h4>SAP ✅ </h4>
    <p>Les paquets <em>Interface</em> et <em>Transports</em> respectent bien ce principe car leur niveau d’abstraction est proportionnel à leur instabilité. Le paquet <em>Core</em> est stable mais manque un peu d’abstraction.</p>

    <h4>SDP ✅ </h4>
    <p>Les paquets instables (<em>Interface</em> et <em>Transports</em>) dépendent de <em>Core</em>, qui est plus stable. Il y a toutefois un léger écart à ce principe car <em>Transports</em> dépend d’un paquet qui est plus stable (bien) mais peu abstrait (moins bien).\</p>

<br>
<br>
Merci!
<br>
<br>
</body>
</html>
