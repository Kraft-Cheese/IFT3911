/** Generated by YAKINDU Statechart Tools code generator. */
package microwave.microwave;

import microwave.ITimer;

public class MicrowaveStatemachine implements IMicrowaveStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private SCInterfaceOperationCallback operationCallback;
		
		public void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean high;
		
		
		public void raiseHigh() {
			high = true;
			runCycle();
		}
		
		private boolean low;
		
		
		public void raiseLow() {
			low = true;
			runCycle();
		}
		
		private boolean digit;
		
		private long digitValue;
		
		
		public void raiseDigit(final long value) {
			digitValue = value;
			digit = true;
			runCycle();
		}
		protected long getDigitValue() {
			if (! digit ) 
				throw new IllegalStateException("Illegal event value access. Event Digit is not raised!");
			return digitValue;
		}
		
		private boolean timer;
		
		
		public void raiseTimer() {
			timer = true;
			runCycle();
		}
		
		private boolean start;
		
		
		public void raiseStart() {
			start = true;
			runCycle();
		}
		
		private boolean stop;
		
		
		public void raiseStop() {
			stop = true;
			runCycle();
		}
		
		private boolean open;
		
		
		public void raiseOpen() {
			open = true;
			runCycle();
		}
		
		private boolean close;
		
		
		public void raiseClose() {
			close = true;
			runCycle();
		}
		
		private long power;
		
		public long getPower() {
			return power;
		}
		
		public void setPower(long value) {
			this.power = value;
		}
		
		protected void clearEvents() {
			high = false;
			low = false;
			digit = false;
			timer = false;
			start = false;
			stop = false;
			open = false;
			close = false;
		}
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		microwave_Microwave,
		microwave_Microwave_Main_UsingPanel,
		microwave_Microwave_Main_UsingPanel_Main_TimerReady,
		microwave_Microwave_Main_UsingPanel_Main_InputDigit,
		microwave_Microwave_Main_UsingPanel_Main_Beeping,
		microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep,
		microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep,
		microwave_Microwave_Main_UsingPanel_Main_Cooking,
		microwave_Microwave_Main_UsingPanel_Main_Finished,
		microwave_Microwave_Main_UsingPanel_Main_ChoosePower,
		microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh,
		microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow,
		microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init,
		microwave_Microwave_Main_UsingPanel_Main_Paused,
		microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen,
		microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed,
		microwave_Microwave_Main_Init,
		microwave_Microwave_OpenCloseDoor_Opened,
		microwave_Microwave_OpenCloseDoor_Closed,
		$NullState$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private long input;
	
	protected long getInput() {
		return input;
	}
	
	protected void setInput(long value) {
		this.input = value;
	}
	
	
	private long cookTime;
	
	protected long getCookTime() {
		return cookTime;
	}
	
	protected void setCookTime(long value) {
		this.cookTime = value;
	}
	
	
	private long acc;
	
	protected long getAcc() {
		return acc;
	}
	
	protected void setAcc(long value) {
		this.acc = value;
	}
	
	
	private String currMessage;
	
	protected String getCurrMessage() {
		return currMessage;
	}
	
	protected void setCurrMessage(String value) {
		this.currMessage = value;
	}
	
	
	public MicrowaveStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setPower(0);
		
		setInput(0);
		
		setCookTime(0);
		
		setAcc(0);
		
		setCurrMessage("");
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_Microwave_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case microwave_Microwave_Main_UsingPanel_Main_TimerReady:
				microwave_Microwave_Main_UsingPanel_Main_TimerReady_react(true);
				break;
			case microwave_Microwave_Main_UsingPanel_Main_InputDigit:
				microwave_Microwave_Main_UsingPanel_Main_InputDigit_react(true);
				break;
			case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep:
				microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep_react(true);
				break;
			case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep:
				microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep_react(true);
				break;
			case microwave_Microwave_Main_UsingPanel_Main_Cooking:
				microwave_Microwave_Main_UsingPanel_Main_Cooking_react(true);
				break;
			case microwave_Microwave_Main_UsingPanel_Main_Finished:
				microwave_Microwave_Main_UsingPanel_Main_Finished_react(true);
				break;
			case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh:
				microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh_react(true);
				break;
			case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow:
				microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow_react(true);
				break;
			case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init:
				microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init_react(true);
				break;
			case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen:
				microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen_react(true);
				break;
			case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed:
				microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed_react(true);
				break;
			case microwave_Microwave_Main_Init:
				microwave_Microwave_Main_Init_react(true);
				break;
			case microwave_Microwave_OpenCloseDoor_Opened:
				microwave_Microwave_OpenCloseDoor_Opened_react(true);
				break;
			case microwave_Microwave_OpenCloseDoor_Closed:
				microwave_Microwave_OpenCloseDoor_Closed_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_Microwave();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case microwave_Microwave:
			return stateVector[0].ordinal() >= State.
					microwave_Microwave.ordinal()&& stateVector[0].ordinal() <= State.microwave_Microwave_OpenCloseDoor_Closed.ordinal();
		case microwave_Microwave_Main_UsingPanel:
			return stateVector[0].ordinal() >= State.
					microwave_Microwave_Main_UsingPanel.ordinal()&& stateVector[0].ordinal() <= State.microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed.ordinal();
		case microwave_Microwave_Main_UsingPanel_Main_TimerReady:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_TimerReady;
		case microwave_Microwave_Main_UsingPanel_Main_InputDigit:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_InputDigit;
		case microwave_Microwave_Main_UsingPanel_Main_Beeping:
			return stateVector[0].ordinal() >= State.
					microwave_Microwave_Main_UsingPanel_Main_Beeping.ordinal()&& stateVector[0].ordinal() <= State.microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep.ordinal();
		case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep;
		case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep;
		case microwave_Microwave_Main_UsingPanel_Main_Cooking:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_Cooking;
		case microwave_Microwave_Main_UsingPanel_Main_Finished:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_Finished;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower:
			return stateVector[0].ordinal() >= State.
					microwave_Microwave_Main_UsingPanel_Main_ChoosePower.ordinal()&& stateVector[0].ordinal() <= State.microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init.ordinal();
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init;
		case microwave_Microwave_Main_UsingPanel_Main_Paused:
			return stateVector[0].ordinal() >= State.
					microwave_Microwave_Main_UsingPanel_Main_Paused.ordinal()&& stateVector[0].ordinal() <= State.microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed.ordinal();
		case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen;
		case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed:
			return stateVector[0] == State.microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed;
		case microwave_Microwave_Main_Init:
			return stateVector[0] == State.microwave_Microwave_Main_Init;
		case microwave_Microwave_OpenCloseDoor_Opened:
			return stateVector[1] == State.microwave_Microwave_OpenCloseDoor_Opened;
		case microwave_Microwave_OpenCloseDoor_Closed:
			return stateVector[1] == State.microwave_Microwave_OpenCloseDoor_Closed;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseHigh() {
		sCInterface.raiseHigh();
	}
	
	public void raiseLow() {
		sCInterface.raiseLow();
	}
	
	public void raiseDigit(long value) {
		sCInterface.raiseDigit(value);
	}
	
	public void raiseTimer() {
		sCInterface.raiseTimer();
	}
	
	public void raiseStart() {
		sCInterface.raiseStart();
	}
	
	public void raiseStop() {
		sCInterface.raiseStop();
	}
	
	public void raiseOpen() {
		sCInterface.raiseOpen();
	}
	
	public void raiseClose() {
		sCInterface.raiseClose();
	}
	
	public long getPower() {
		return sCInterface.getPower();
	}
	
	public void setPower(long value) {
		sCInterface.setPower(value);
	}
	
	private void effect_Microwave_Microwave_Main_UsingPanel_tr1() {
		exitSequence_Microwave_Microwave_Main_UsingPanel();
		enterSequence_Microwave_Microwave_Main_Init_default();
	}
	
	private void effect_Microwave_Microwave_Main_UsingPanel_Main_Paused_tr0() {
		exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused();
		enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking_default();
	}
	
	/* Entry action for state 'Microwave'. */
	private void entryAction_Microwave_Microwave() {
		sCInterface.operationCallback.clearDisplay();
	}
	
	/* Entry action for state 'TimerReady'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_TimerReady() {
		sCInterface.operationCallback.clearDisplay();
	}
	
	/* Entry action for state 'InputDigit'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_InputDigit() {
		setCookTime(getCookTime() * 10);
		
		setCookTime(getCookTime() + input);
		
		sCInterface.operationCallback.displayTime(getCookTime());
		
		setAcc(getAcc() + 1);
	}
	
	/* Entry action for state 'Beeping'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping() {
		timer.setTimer(this, 0, (5 * 1000), false);
	}
	
	/* Entry action for state 'DoBeep'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep() {
		timer.setTimer(this, 1, 500, false);
		
		sCInterface.operationCallback.beepOn();
	}
	
	/* Entry action for state 'StopBeep'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep() {
		timer.setTimer(this, 2, 500, false);
		
		sCInterface.operationCallback.beepOff();
	}
	
	/* Entry action for state 'Cooking'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_Cooking() {
		timer.setTimer(this, 3, (1 * 1000), false);
		
		sCInterface.operationCallback.displayTime(getCookTime());
		
		sCInterface.operationCallback.cook();
	}
	
	/* Entry action for state 'Finished'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_Finished() {
		timer.setTimer(this, 4, 2, false);
		
		setCurrMessage("Finished");
		
		sCInterface.operationCallback.display(getCurrMessage());
		
		sCInterface.operationCallback.stopCook();
	}
	
	/* Entry action for state 'PowerHigh'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh() {
		sCInterface.setPower(1);
		
		setCurrMessage("High");
		
		sCInterface.operationCallback.display(getCurrMessage());
	}
	
	/* Entry action for state 'PowerLow'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow() {
		sCInterface.setPower(2);
		
		setCurrMessage("Low");
		
		sCInterface.operationCallback.display(getCurrMessage());
	}
	
	/* Entry action for state 'Paused'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_Paused() {
		sCInterface.operationCallback.stopCook();
	}
	
	/* Entry action for state 'PausedOpen'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen() {
		setCurrMessage("Waiting");
		
		sCInterface.operationCallback.display(getCurrMessage());
	}
	
	/* Entry action for state 'PausedClosed'. */
	private void entryAction_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed() {
		sCInterface.operationCallback.displayTime(getCookTime());
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_Microwave_Microwave_Main_Init() {
		timer.setTimer(this, 5, 2, false);
		
		sCInterface.operationCallback.clearDisplay();
		
		sCInterface.operationCallback.stopCook();
		
		sCInterface.operationCallback.beepOff();
		
		setInput(0);
		
		setCookTime(0);
		
		setAcc(0);
		
		setCurrMessage("");
		
		sCInterface.setPower(0);
	}
	
	/* Entry action for state 'Opened'. */
	private void entryAction_Microwave_Microwave_OpenCloseDoor_Opened() {
		sCInterface.operationCallback.openDoor();
	}
	
	/* Entry action for state 'Closed'. */
	private void entryAction_Microwave_Microwave_OpenCloseDoor_Closed() {
		sCInterface.operationCallback.closeDoor();
	}
	
	/* Exit action for state 'Beeping'. */
	private void exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'DoBeep'. */
	private void exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'StopBeep'. */
	private void exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Cooking'. */
	private void exitAction_Microwave_Microwave_Main_UsingPanel_Main_Cooking() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Finished'. */
	private void exitAction_Microwave_Microwave_Main_UsingPanel_Main_Finished() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Init'. */
	private void exitAction_Microwave_Microwave_Main_Init() {
		timer.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state Microwave */
	private void enterSequence_Microwave_Microwave_default() {
		entryAction_Microwave_Microwave();
		enterSequence_Microwave_Microwave_Main_default();
		enterSequence_Microwave_Microwave_OpenCloseDoor_default();
	}
	
	/* 'default' enter sequence for state UsingPanel */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_default() {
		enterSequence_Microwave_Microwave_Main_UsingPanel_Main_default();
	}
	
	/* 'default' enter sequence for state TimerReady */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_TimerReady_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_TimerReady();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_TimerReady;
	}
	
	/* 'default' enter sequence for state InputDigit */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_InputDigit_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_InputDigit();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_InputDigit;
	}
	
	/* 'default' enter sequence for state Beeping */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping();
		enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_default();
	}
	
	/* 'default' enter sequence for state DoBeep */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep;
	}
	
	/* 'default' enter sequence for state StopBeep */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep;
	}
	
	/* 'default' enter sequence for state Cooking */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_Cooking();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_Cooking;
	}
	
	/* 'default' enter sequence for state Finished */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Finished_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_Finished();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_Finished;
	}
	
	/* 'default' enter sequence for state ChoosePower */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_default() {
		enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_default();
	}
	
	/* 'default' enter sequence for state PowerHigh */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh;
	}
	
	/* 'default' enter sequence for state PowerLow */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow;
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init_default() {
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init;
	}
	
	/* 'default' enter sequence for state Paused */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_Paused();
		enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_default();
	}
	
	/* 'default' enter sequence for state PausedOpen */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen;
	}
	
	/* 'default' enter sequence for state PausedClosed */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed_default() {
		entryAction_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed;
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_Microwave_Microwave_Main_Init_default() {
		entryAction_Microwave_Microwave_Main_Init();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Microwave_Main_Init;
	}
	
	/* 'default' enter sequence for state Opened */
	private void enterSequence_Microwave_Microwave_OpenCloseDoor_Opened_default() {
		entryAction_Microwave_Microwave_OpenCloseDoor_Opened();
		nextStateIndex = 1;
		stateVector[1] = State.microwave_Microwave_OpenCloseDoor_Opened;
	}
	
	/* 'default' enter sequence for state Closed */
	private void enterSequence_Microwave_Microwave_OpenCloseDoor_Closed_default() {
		entryAction_Microwave_Microwave_OpenCloseDoor_Closed();
		nextStateIndex = 1;
		stateVector[1] = State.microwave_Microwave_OpenCloseDoor_Closed;
	}
	
	/* 'default' enter sequence for region Microwave */
	private void enterSequence_Microwave_default() {
		react_Microwave__entry_Default();
	}
	
	/* 'default' enter sequence for region Main */
	private void enterSequence_Microwave_Microwave_Main_default() {
		react_Microwave_Microwave_Main__entry_Default();
	}
	
	/* 'default' enter sequence for region Main */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_default() {
		react_Microwave_Microwave_Main_UsingPanel_Main__entry_Default();
	}
	
	/* 'default' enter sequence for region Main */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_default() {
		react_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main__entry_Default();
	}
	
	/* 'default' enter sequence for region Main */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_default() {
		react_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main__entry_Default();
	}
	
	/* 'default' enter sequence for region Main */
	private void enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_default() {
		react_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main__entry_Default();
	}
	
	/* 'default' enter sequence for region OpenCloseDoor */
	private void enterSequence_Microwave_Microwave_OpenCloseDoor_default() {
		react_Microwave_Microwave_OpenCloseDoor__entry_Default();
	}
	
	/* Default exit sequence for state UsingPanel */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel() {
		exitSequence_Microwave_Microwave_Main_UsingPanel_Main();
	}
	
	/* Default exit sequence for state TimerReady */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_TimerReady() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state InputDigit */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_InputDigit() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Beeping */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping() {
		exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main();
		exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping();
	}
	
	/* Default exit sequence for state DoBeep */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep();
	}
	
	/* Default exit sequence for state StopBeep */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep();
	}
	
	/* Default exit sequence for state Cooking */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Microwave_Main_UsingPanel_Main_Cooking();
	}
	
	/* Default exit sequence for state Finished */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Finished() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Microwave_Main_UsingPanel_Main_Finished();
	}
	
	/* Default exit sequence for state ChoosePower */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower() {
		exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main();
	}
	
	/* Default exit sequence for state PowerHigh */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state PowerLow */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Paused */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused() {
		exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main();
	}
	
	/* Default exit sequence for state PausedOpen */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state PausedClosed */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_Microwave_Microwave_Main_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Microwave_Main_Init();
	}
	
	/* Default exit sequence for state Opened */
	private void exitSequence_Microwave_Microwave_OpenCloseDoor_Opened() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Closed */
	private void exitSequence_Microwave_Microwave_OpenCloseDoor_Closed() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for region Microwave */
	private void exitSequence_Microwave() {
		switch (stateVector[0]) {
		case microwave_Microwave_Main_UsingPanel_Main_TimerReady:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_TimerReady();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_InputDigit:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_InputDigit();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep();
			exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep();
			exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Cooking:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Finished:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Finished();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed();
			break;
		case microwave_Microwave_Main_Init:
			exitSequence_Microwave_Microwave_Main_Init();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case microwave_Microwave_OpenCloseDoor_Opened:
			exitSequence_Microwave_Microwave_OpenCloseDoor_Opened();
			break;
		case microwave_Microwave_OpenCloseDoor_Closed:
			exitSequence_Microwave_Microwave_OpenCloseDoor_Closed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Main */
	private void exitSequence_Microwave_Microwave_Main() {
		switch (stateVector[0]) {
		case microwave_Microwave_Main_UsingPanel_Main_TimerReady:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_TimerReady();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_InputDigit:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_InputDigit();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep();
			exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep();
			exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Cooking:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Finished:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Finished();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed();
			break;
		case microwave_Microwave_Main_Init:
			exitSequence_Microwave_Microwave_Main_Init();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Main */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main() {
		switch (stateVector[0]) {
		case microwave_Microwave_Main_UsingPanel_Main_TimerReady:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_TimerReady();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_InputDigit:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_InputDigit();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep();
			exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep();
			exitAction_Microwave_Microwave_Main_UsingPanel_Main_Beeping();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Cooking:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Finished:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Finished();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Main */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main() {
		switch (stateVector[0]) {
		case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Main */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main() {
		switch (stateVector[0]) {
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Main */
	private void exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main() {
		switch (stateVector[0]) {
		case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen();
			break;
		case microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed:
			exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region OpenCloseDoor */
	private void exitSequence_Microwave_Microwave_OpenCloseDoor() {
		switch (stateVector[1]) {
		case microwave_Microwave_OpenCloseDoor_Opened:
			exitSequence_Microwave_Microwave_OpenCloseDoor_Opened();
			break;
		case microwave_Microwave_OpenCloseDoor_Closed:
			exitSequence_Microwave_Microwave_OpenCloseDoor_Closed();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave__entry_Default() {
		enterSequence_Microwave_Microwave_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Microwave_Main__entry_Default() {
		enterSequence_Microwave_Microwave_Main_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Microwave_Main_UsingPanel_Main__entry_Default() {
		enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main__entry_Default() {
		enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main__entry_Default() {
		enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main__entry_Default() {
		enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Microwave_OpenCloseDoor__entry_Default() {
		enterSequence_Microwave_Microwave_OpenCloseDoor_Closed_default();
	}
	
	/* The reactions of exit default. */
	private void react_Microwave_Microwave_Main_UsingPanel_Main__exit_Default() {
		effect_Microwave_Microwave_Main_UsingPanel_tr1();
	}
	
	/* The reactions of exit default. */
	private void react_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main__exit_Default() {
		effect_Microwave_Microwave_Main_UsingPanel_Main_Paused_tr0();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean microwave_Microwave_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_react(try_transition)==false) {
				if (sCInterface.stop) {
					exitSequence_Microwave_Microwave_Main_UsingPanel();
					enterSequence_Microwave_Microwave_Main_Init_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_TimerReady_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_react(try_transition)==false) {
				if (sCInterface.digit) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_TimerReady();
					setInput(sCInterface.getDigitValue());
					
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_InputDigit_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_InputDigit_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_react(try_transition)==false) {
				if (((sCInterface.digit) && (getAcc()<4))) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_InputDigit();
					setInput(sCInterface.getDigitValue());
					
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_InputDigit_default();
				} else {
					if (((sCInterface.start) && (isStateActive(State.microwave_Microwave_OpenCloseDoor_Closed)))) {
						exitSequence_Microwave_Microwave_Main_UsingPanel_Main_InputDigit();
						enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_Beeping_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_react(try_transition)==false) {
				if (timeEvents[0]) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping();
					react_Microwave_Microwave_Main_UsingPanel_Main__exit_Default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_Main_Beeping_react(try_transition)==false) {
				if (timeEvents[1]) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep();
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_Main_Beeping_react(try_transition)==false) {
				if (timeEvents[2]) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_StopBeep();
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_Main_DoBeep_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_Cooking_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_react(try_transition)==false) {
				if (getCookTime()<=0) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking();
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Finished_default();
				} else {
					if (sCInterface.open) {
						exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking();
						enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_default();
					} else {
						if (timeEvents[3]) {
							exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking();
							setCookTime(getCookTime() - 1);
							
							enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Cooking_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_Finished_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_react(try_transition)==false) {
				if (timeEvents[4]) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Finished();
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Beeping_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_ChoosePower_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_react(try_transition)==false) {
				if (((sCInterface.timer) && (sCInterface.getPower()!=0))) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower();
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_TimerReady_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_Main_ChoosePower_react(try_transition)==false) {
				if (sCInterface.low) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh();
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_Main_ChoosePower_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow();
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_Main_ChoosePower_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init();
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerHigh_default();
				} else {
					if (sCInterface.low) {
						exitSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_Init();
						enterSequence_Microwave_Microwave_Main_UsingPanel_Main_ChoosePower_Main_PowerLow_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_Paused_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_Main_Paused_react(try_transition)==false) {
				if (sCInterface.close) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen();
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_Main_UsingPanel_Main_Paused_react(try_transition)==false) {
				if (sCInterface.open) {
					exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed();
					enterSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedOpen_default();
				} else {
					if (sCInterface.start) {
						exitSequence_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main_PausedClosed();
						react_Microwave_Microwave_Main_UsingPanel_Main_Paused_Main__exit_Default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_Main_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Microwave_react(try_transition)==false) {
				if (timeEvents[5]) {
					exitSequence_Microwave_Microwave_Main_Init();
					enterSequence_Microwave_Microwave_Main_UsingPanel_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_OpenCloseDoor_Opened_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.close) {
				exitSequence_Microwave_Microwave_OpenCloseDoor_Opened();
				enterSequence_Microwave_Microwave_OpenCloseDoor_Closed_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Microwave_OpenCloseDoor_Closed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.open) {
				exitSequence_Microwave_Microwave_OpenCloseDoor_Closed();
				enterSequence_Microwave_Microwave_OpenCloseDoor_Opened_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
